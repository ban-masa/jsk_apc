(ros::load-ros-manifest "baxtereus")
(load "package://baxtereus/baxter-interface.l")
(load "package://euslisp/jskeus/eus/models/arrow-object.l")

(setq *oreo* (make-cube 100 150 150 :pos #f(1200 0 1435)))
(send *oreo* :set-color :blue)
(setq tote_height 400)
(setq tote_pos (vector 780 0))
(setq hand_len 440)

(defun init ()
  ;; baxter model
  (when (not (boundp '*baxter*))
    (baxter-init)
    (send (send *baxter* :rarm :end-coords) :newcoords (make-coords :pos #f(50 0 310) :rpy (float-vector 0 -pi/2 0)))
    (send (send *baxter* :larm :end-coords) :newcoords (make-coords :pos #f(50 0 310) :rpy (float-vector 0 -pi/2 0)))
    (send *baxter* :locate #f(0 0 950) :world))
  ;; pod-lowres model
  (when (not (boundp '*pod*))
    (load "package://jsk_2016_01_baxter_apc/euslisp/include/pod-lowres.l")
    (pod-init))

  (when (not (boundp '*tote*))
    (setq *tote* (body- (make-cube 400 500 300)
                        (make-cube 350 450 275 :pos #f(0 0 25))))
    (send *tote* :translate (float-vector (elt tote_pos 0) (elt tote_pos 1) (+ tote_height 150)))
    (send *tote* :set-color :red))

  ;;(setq *target* (instance-cube 100 100 100))
  (when (not (boundp '*target*))
    (setq *target* (arrow))
    (send *tote* :translate #f(0 0 0)))
  )
(init)
(objects (list *baxter* *pod* *tote* *target* *oreo*))

(defun movepos
  (robot arm endcoords axis)
  (send robot arm :inverse-kinematics endcoords :rotation-axis axis :debug-view t))

(defun move-arm-into-bin
  (robot arm targetcoords)
  (let ((viacoords))
    (setq viacoords (make-coords :pos (float-vector 1000 (elt (send targetcoords :pos) 1) (elt (send targetcoords :pos) 2))))
    (movepos robot arm viacoords :x)
    (send *ri* :angle-vector (send *baxter* :angle-vector) 1000)
    (send *ri* :wait-interpolation))
  (movepos robot arm targetcoords :x))

(defun init-target ();;Set terget object randomly
  (setq *target* (make-cube 100 100 100))
  (send *target* :set-color :blue)
  (let ((x (+ (- (elt tote_pos 0) 125) (random 250))) (y (+ (- (elt tote_pos 1) 175) (random 350))))
	(send *target* :translate (float-vector x y (+ tote_height 50))))
  (objects (list *baxter* *pod* *tote* *target*)))

(defun tote2pod (arm)
  (send *target* :rotate (/ pi 2.0) :y)
  (movepos *baxter* arm (send *target* :coords) nil)
  (send *ri* :angle-vector (send *baxter* :angle-vector) 1000)
  (send *ri* :wait-interpolation)
  (send *baxter* arm :end-coords :assoc *target*)
  (send *baxter* :reset-pose)
  (send *ri* :angle-vector (send *baxter* :angle-vector) 1000)
  (send *ri* :wait-interpolation)
  (move-arm-into-bin *baxter* arm (make-coords :pos (float-vector 1300 (random 200) (+ 1000 (random 600)))))
  (send *ri* :angle-vector (send *baxter* :angle-vector) 1000)
  (send *ri* :wait-interpolation)
  (send *baxter* arm :end-coords :dissoc *target*)
  (send *baxter* :reset-pose)
  (send *ri* :angle-vector (send *baxter* :angle-vector) 1000)
  (send *ri* :wait-interpolation))

(defun pod2tote (arm targetcoords)
  (move-arm-into-bin *baxter* arm targetcoords)
  ;;insert grasp motion
  (let ((tempcoords))
    (setq tempcoords (make-coords :pos (float-vector 1000 (elt (send targetcoords :pos) 1) (elt (send targetcoords :pos) 2))))
    (movepos *baxter* arm tempcoords :x))
  (send *baxter* :reset-pose))

(defun test ()
  (do ((i 2 (+ i 1))) ((> i 5))
	(init-target)
	(tote2pod :rarm)
	(init-target)
	(tote2pod :larm)))
(ros::ros-info "(test) : start demo")
